// <auto-generated />
using System;
using DatabaseTask.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DatabaseTask.Data.Migrations
{
    [DbContext(typeof(DatabaseTaskDbContext))]
    [Migration("20231004124211_kindergarden")]
    partial class kindergarden
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DatabaseTask.Core.Domain.Absence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Absences");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Child", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AbsenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HintId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("InQueue")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AbsenceId");

                    b.HasIndex("GroupId");

                    b.HasIndex("HintId");

                    b.ToTable("Childs");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.Property<Guid?>("WorkingHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkingHistoryId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Nursery")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Vintage")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Hint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Hints");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Profession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WorkingHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkingHistoryId");

                    b.ToTable("Professions");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.WorkingHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("WorkingHistories");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Child", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.Absence", null)
                        .WithMany("Childs")
                        .HasForeignKey("AbsenceId");

                    b.HasOne("DatabaseTask.Core.Domain.Group", null)
                        .WithMany("Childs")
                        .HasForeignKey("GroupId");

                    b.HasOne("DatabaseTask.Core.Domain.Hint", null)
                        .WithMany("Childs")
                        .HasForeignKey("HintId");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Employee", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.WorkingHistory", null)
                        .WithMany("Employees")
                        .HasForeignKey("WorkingHistoryId");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Group", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.Employee", null)
                        .WithMany("Groups")
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Profession", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.WorkingHistory", null)
                        .WithMany("Professions")
                        .HasForeignKey("WorkingHistoryId");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Absence", b =>
                {
                    b.Navigation("Childs");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Employee", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Group", b =>
                {
                    b.Navigation("Childs");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Hint", b =>
                {
                    b.Navigation("Childs");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.WorkingHistory", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Professions");
                });
#pragma warning restore 612, 618
        }
    }
}
